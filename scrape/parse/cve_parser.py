import os.path
import json
from django.conf import settings
from cve_data.models import *

ROOT = settings.BASE_DIR + '/../static'

class CveParser:
    
    def __init__(self, file_path):
    	self.__file_path = ROOT + file_path
    	self.__file_exists = os.path.isfile(self.__file_path)

    @property
    def file_path(self):
    	return self.__file_path

    @file_path.setter
    def file_path(self, file_path):
    	self.__file_path = ROOT + file_path
    	self.__file_exists = os.path.isfile(self.__file_path)

    @property
    def file_exists(self):
    	return self.__file_exists

    def __formatDate(self, dateString):
        return '2017-01-01'#TODO

    def __getMetricObjectByName(self, metric_name):
        metric = MetricType.objects.filter(name=metric_name).first()

        #Create the metric object if it does not exist
        if metric is None:
            metric = MetricType()
            metric.name = metric_name
            metric.description = metric_name #placeholder for the time being
            metric.save()

        return metric

    def __createCveScoreObjects(self, cve, metric, scoreData):
        exploitability = ScoreType.objects.filter(name='exploitabilityScore').first()
        impact = ScoreType.objects.filter(name='impactScore').first()

        # Create exploitability score if the object does not exist
        if exploitability is None:
            exploitability = ScoreType()
            exploitability.name = 'exploitabilityScore'
            exploitability.description = 'exploitabilityScore' #placeholder for the time being
            exploitability.save()

        # Create impact score if the object does not exist
        if impact is None:
            impact = ScoreType()
            impact.name = 'impactScore'
            impact.description = 'impactScore' #placeholder for the time being
            impact.save()

        # Create Exploitability CveScore Object
        exploitabilityScore = CVEScore()
        exploitabilityScore.cve = cve
        exploitabilityScore.score_type = exploitability
        exploitabilityScore.metric_type = metric
        exploitabilityScore.value = scoreData['exploitabilityScore']
        if 'severity' in scoreData:
            exploitabilityScore.severity = scoreData['severity']
        else:
            exploitabilityScore.severity = 'NONE'

        # Create Impact CveScore Object
        impactScore = CVEScore()
        impactScore.cve = cve
        impactScore.score_type = impact
        impactScore.metric_type = metric
        impactScore.value = scoreData['impactScore']
        if 'severity' in scoreData:
            impactScore.severity = scoreData['severity']
        else:
            impactScore.severity = 'NONE'

        exploitabilityScore.save()
        impactScore.save()

    def __createReferenceObject(self, cve, url):
        reference = ReferenceURL()
        reference.url = url
        reference.cve = cve
        reference.save()

    def __createVendorObjects(self, cve, vendorData):
        for datum in vendorData:

            # Get (or create) Vendor object
            vendor = Vendor.objects.filter(vendor_name=datum['vendor_name']).first()
            if vendor is None:
                vendor = Vendor()
                vendor.vendor_name = datum['vendor_name']
                vendor.save()

            # Get (or create) VendorProduct object for all product data
            for product_datum in datum['product']['product_data']:

                vendor_product = VendorProduct.objects.filter(vendor=vendor, product_name=product_datum['product_name']).first()
                if vendor_product is None:
                    vendor_product = VendorProduct()
                    vendor_product.vendor = vendor
                    vendor_product.product_name = product_datum['product_name']
                    vendor_product.save()

                # Get (or create) VendorProductVersion objects for affected versions
                for version_datum in product_datum['version']['version_data']:
                    v_value = version_datum['version_value']
                    v_affected = version_datum['version_affected']
                    version = VendorProductVersion.objects.filter(vendor_product=vendor_product, version_value=v_value, version_affected=v_affected).first()
                    if version is None:
                        version = VendorProductVersion()
                        version.vendor_product = vendor_product
                        version.version_value = v_value
                        version.version_affected = v_affected
                        version.save()

                    #Finally... create the CVE / Version connection
                    vpvc = VendorProductVersionCVE()
                    vpvc.cve = cve
                    vpvc.vendor_product_version = version
                    vpvc.save()

    def parse(self):        
    	if self.__file_exists:
            with open(self.__file_path) as data_file:    
                full_data = json.load(data_file)
                if 'CVE_Items' in full_data:
                    data = full_data['CVE_Items']
                    for datum in data:
                        if 'cve' in datum:
                            # First, create the CVE object
                            cve = CVE()
                            cve.cve_id = datum['cve']['CVE_data_meta']['ID']
                            cve.description = datum['cve']['description']['description_data'][0]['value']
                            cve.date = self.__formatDate(datum['publishedDate'])
                            cve.save()

                            if 'affects' in datum['cve']:
                                self.__createVendorObjects(cve, datum['cve']['affects']['vendor']['vendor_data'])

                            if 'impact' in datum:
                                # Create the CVE Score objects
                                for metric_name in datum['impact']:
                                    metric = self.__getMetricObjectByName(metric_name)
                                    self.__createCveScoreObjects(cve, metric, datum['impact'][metric_name])

                            if 'references' in datum:
                                # Create the reference URL objects
                                for reference in datum['references']:
                                    self.__createReferenceObject(cve, reference['url'])
            return True
        else:
            return False
